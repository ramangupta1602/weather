{"version":3,"sources":["apiKeys.js","images/WeatherIcons.gif","forcast.js","currentLocation.js","App.js","index.js"],"names":["module","exports","key","base","Forcast","props","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","console","log","data","catch","message","defaults","useEffect","className","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","alt","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03a7630f.chunk.js","sourcesContent":["// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"bdf75441cf17a608763425985068db7f\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        console.log(response)\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n  // function checkTime(i) {\n  //   if (i < 10) {\n  //     i = \"0\" + i;\n  //   } // add zero in front of numbers < 10\n  //   return i;\n  // }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n              alt=\"...\"\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"...\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temperature\">\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temperature\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temperature\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temperature\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n    state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data?.name,\n      temperatureC: Math.round(data?.main?.temp),\n      temperatureF: Math.round(data?.main?.temp * 1.8 + 32),\n      humidity: data?.main?.humidity,\n      main: data?.weather[0].main,\n      country: data?.sys?.country,\n      // sunrise: this?.getTimeFromUnixTimeStamp(data?.sys?.sunrise),\n\n      // sunset: this?.getTimeFromUnixTimeStamp(data?.sys?.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              {/* <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3> */}\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              {/* <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n              </div> */}\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} alt=\"...\" />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      {/* <div className=\"footer-info\">\n        <a href=\"https://www.htmlhints.com/article/how-to-create-toggle-switch/93\">\n          Download Source Code\n        </a>{\" \"}\n        | Developed by{\" \"}\n        <a target=\"_blank\" href=\"https://www.gauravghai.dev/\">\n          Gaurav Ghai\n        </a>{\" \"}\n        | Powered by{\" \"}\n        <a target=\"_blank\" href=\"https://www.htmlhints.com/\">\n          HTML HINTS\n        </a>\n      </div> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}